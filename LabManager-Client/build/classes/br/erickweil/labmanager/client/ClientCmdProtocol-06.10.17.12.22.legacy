/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.erickweil.labmanager.client;

import static br.erickweil.labmanager.client.Inicio._down_folder;
import br.erickweil.labmanager.client.swing.ScreenLocker;
import br.erickweil.labmanager.cmd.CSVUtils;
import br.erickweil.labmanager.cmd.CmdExec;
import br.erickweil.labmanager.cmd.ProgramOpener;
import br.erickweil.labmanager.tests.ScreenLockerTest;
import br.erickweil.webserver.ReaderWriter;
import br.erickweil.webserver.ServerProtocol;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.mindrot.jbcrypt.BCrypt;


/**
 * Aqui acontece toda a parte da comunicação, a classe cmdBroadcasterProtocol deve
 * estar de acordo com essa.
 * @author Aluno
 */
public class ClientCmdProtocol extends ServerProtocol{
    public static final String VERSAO = "06.10.17.12.22";
    private final String serverPasswHash;
    private final int conn_index;
    public ClientCmdProtocol(int conn_index,String serverPasswHash)
    {
        this.conn_index = conn_index;
        this.serverPasswHash = serverPasswHash;
    }
    
    
    public void write(String msg) throws UnsupportedEncodingException, IOException
    {
    	ReaderWriter.writeASCII(URLEncoder.encode(msg,"UTF-8")+"\n", output);
    }
    
    public String read() throws UnsupportedEncodingException, IOException
    {
    	String txt = ReaderWriter.readASCIILine(input);
    	if(txt == null || txt.isEmpty()) return txt;
    	return URLDecoder.decode(txt,"UTF-8");
    }
    
    public int tryReadInt(int defaultValue)
    {
        try{
            return Integer.parseInt(read());
        }
        catch(Exception e)
        {
            e.printStackTrace();
            return defaultValue;
        }
    }
    
    @Override
    public void processRequest() throws IOException {

        
        
        write(VERSAO);
        //https://stackoverflow.com/questions/797549/get-login-username-in-java
        //https://stackoverflow.com/questions/19990038/how-to-get-windows-username-in-java
        String userName = CmdExec.getUser();
        if(userName == null || userName.isEmpty())
            userName = System.getProperty("user.name");
        write(userName);
        
        // le a senha do servidor
        String senha = read();
		// Validating a hash
        Inicio.out.println("Checando senha...");
        try
        {
            if (!BCrypt.checkpw(senha, serverPasswHash))
            //if(!server_passw.equals(senha))
            {
                write("Senha incorreta!");
                Inicio.out.println("Servidor com senha incorreta.");
                throw new ExitAppException("servidor não foi autenticado.",null,false);
            }
            Inicio.out.println("Servidor Autenticado!");
            write("OK");
        }
        catch(Exception e)
        {
            e.printStackTrace();
            write("Senha incorreta!");
            Inicio.out.println("erro ao processar senha incorreta.");
            throw new ExitAppException("servidor não foi autenticado.",e,false);
        }
        
        // para controlar o delay de reconexao e mudar o wifi sempre
        ClientApp.ConnectedOnce = true;
        //opcoes
        int splash_delay = tryReadInt(15000);
        
        // splash screen
        if(conn_index == 0 && splash_delay > 0)
        {
            ScreenLocker.splash(splash_delay);
        }
        
        try
        {
        // espera por pedidos de execucao de comandos
        String linha;
        while(!(linha = read()).isEmpty())
        {
        	linha = linha.trim();
        	boolean hasArgs = linha.contains(" ");
        	final String req;
        	final String[] arguments;
        	if(!hasArgs)
        	{
        		req = linha.toLowerCase();
        		arguments = null;	
        	}
        	else
        	{
        		req = linha.substring(0,linha.indexOf(' ')).toLowerCase();
                int n_args = Integer.parseInt(linha.substring(linha.indexOf(' ')+1)); 
        		arguments = new String[n_args];
                for(int i=0;i<n_args;i++)
                {
                    arguments[i] = read();
                }
        	}
            Inicio.out.println("Requisicao '"+linha+"'");
            
            switch(req)
            {
                case "stop":
                	CmdExec.stop(arguments[0]);
                	write("OK");
                break;
                case "start": // -- inseguro
                    String program_path = arguments[0];
                    String program_process = arguments[1];
                    if(ProgramOpener.start(program_path,program_process))
                    {
                        write("OK");
                    }
                    else
                    {
                        write("Nao Pode abrir o programa: '"+program_path+"'");
                    }
                break;
                case "exit":
                	write("OK");
                	throw new ExitAppException("saiu normalmente.",null,true);
                case "shutdown":
                	CmdExec.shutdown();
                	write("OK");
                break;
                case "restart":
                	CmdExec.restart();
                	write("OK");
                break;
                case "logoff":
                	CmdExec.logoff();
                	write("OK");
                break;
                case "cancelshutdown":
                	CmdExec.cancelshutdown();
                	write("OK");
                break;
                case "blacklist":
                	if(arguments == null)
                    {
                       ClientApp.setBlackList(new ArrayList<String>()); 
                    }
                    else
                    {
                        ClientApp.setBlackList(Arrays.asList(arguments));
                    }
                	write("OK");
                break;
                case "lockscreen":
                    ClientApp.locker.startLocking(false);
                    write("OK");
                break;
                case "unlockscreen":
                    ClientApp.locker.stopLocking();
                    write("OK");
                break;
                case "download":// -- inseguro
                {
                    String action = arguments[0];
                    String dest_path = ProgramOpener.parsePath(_down_folder+arguments[1]).getAbsolutePath();
                    int size = Integer.parseInt(arguments[2]);
                    byte[] file = new byte[size];
                    input.readFully(file);
                    Files.write(new File(dest_path).toPath(), file);
                    if(action.equals("run"))
                    {
                        if(ProgramOpener.start(dest_path,null))
                        {
                            write("OK");
                        }
                        else
                        {
                            write("Nao Pode abrir o programa: '"+dest_path+"'");
                        }
                    }
                    else
                    {
                        write("OK");
                    }
                }
                break;
                //case "exec": //-- inseguro
                //	// retira o 'exec'
                //	String cmd = arguments[0];
                //	CmdExec.execCmd(cmd);
                //break;
                //case "bringwindow":
                //https://stackoverflow.com/questions/557166/bring-to-front-for-windows-xp-command-shell
                //break;
                case "msg":
                	//final String txt = linha.substring(linha.indexOf(' ')+1);
                    final String txt = arguments[0];
                	new Thread(new Runnable(){public void run(){
                		//JOptionPane.showMessageDialog(null, txt);
                        JDialog dialog = new JOptionPane(txt,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION).createDialog("Mensagem Recebida"); 
                        dialog.setAlwaysOnTop(true);
                        dialog.setVisible(true);
                        dialog.dispose();
                	}}).start();;
                	write("OK");
                break;
                case "ping":
                    write("pong");
                break;
                default:
                	write("Comando '"+req+"' não implementado");
                break;
            }
        	
        }
        }
        catch(ExitAppException e){
            throw e;
        }
        catch(Exception e){
            Inicio.out.println("Erro no loop de processamento dos requests:");
            e.printStackTrace(Inicio.out);
        }
        finally
        {
            if(ClientApp.locker != null)
            {
                try {
                    ClientApp.locker.stopLocking();
                } catch (InterruptedException ex) {
                    Logger.getLogger(ClientCmdProtocol.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            Inicio.out.println("Acabou!");
        }
    }
    
}
