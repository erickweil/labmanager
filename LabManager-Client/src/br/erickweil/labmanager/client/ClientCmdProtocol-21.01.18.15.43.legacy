/*
 * Copyright (C) 2018 Erick Leonardo Weil
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.erickweil.labmanager.client;

import br.erickweil.labamanger.common.JpegHelper;
import br.erickweil.labmanager.client.swing.ScreenLocker;
import br.erickweil.labmanager.cmd.CmdExec;
import br.erickweil.labmanager.cmd.ProgramOpener;
import br.erickweil.labmanager.start.Inicio;
import br.erickweil.labmanager.tests.ScreenLockerTest;
import br.erickweil.webserver.ReaderWriter;
import br.erickweil.webserver.ServerProtocol;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;



/**
 * Aqui acontece toda a parte da comunicação, a classe cmdBroadcasterProtocol deve
 * estar de acordo com essa.
 * @author Aluno
 */
public class ClientCmdProtocol extends ServerProtocol{
    public static final String VERSAO = "21.01.18.15.43";
    private final int conn_index;
    public ClientCmdProtocol(int conn_index)
    {
        this.conn_index = conn_index;
    }
    
    
    public void write(String msg) throws UnsupportedEncodingException, IOException
    {
    	ReaderWriter.writeASCII(URLEncoder.encode(msg,"UTF-8")+"\n", output);
    }
    
    public String read() throws UnsupportedEncodingException, IOException
    {
    	String txt = ReaderWriter.readASCIILine(input);
    	if(txt == null || txt.isEmpty()) return txt;
    	return URLDecoder.decode(txt,"UTF-8");
    }
    
    public int tryReadInt(int defaultValue)
    {
        try{
            return Integer.parseInt(read());
        }
        catch(Exception e)
        {
            e.printStackTrace();
            return defaultValue;
        }
    }
    
    @Override
    public void processRequest() throws IOException {

        
        
        write(VERSAO);
        //https://stackoverflow.com/questions/797549/get-login-username-in-java
        //https://stackoverflow.com/questions/19990038/how-to-get-windows-username-in-java
        String user_name = CmdExec.getUser();
        if(user_name == null || user_name.isEmpty())
            user_name = System.getProperty("user.name");
        
        JSONObject client_info = new JSONObject();
        // valores obrigatorios
        client_info.put("user_name", user_name);
        client_info.put("uuid", ClientApp.UUID);
        
        // client info
        write(client_info.toJSONString());
        
        
        // NAO PRECISA MAIS DA SENHA - ERA SO ALGUEM FINGIR SER O CLIENTE E ROUBAVA A SENHA
        // IRA SE CONECTAR USANDO SSL,
        // PELO FATO DE A CONEXAO SSL SER BEM SUCEDIDA, PROVA QUE:
        // 1. o servidor tem a chave privada do único certificado que esse cliente confia
        // 2. essa chave privada está encriptada com uma senha, o que prova que foi descriptada
        // 3. o que prova que é uma pessoa autorizada, pois conseguiu descriptar usando a senha.
        
        // o que traz um problema: Com uma senha se controla todos os computadores.
        // deveria ser adicionado uma etapa a mais.
        // OBRIGAR o atacante a ter acesso FÍSICO ao computador do professor ( O que faria da senha uma formalidade )
        // Não apenas fingir o IP.
        // isso se torna verdade caso a keystore do servidor sendo diferente em cada sala.
        // e tomando todas as precauções necessárias ao instalar o servidor.
        // mesmo com a senha e um instalador, só daria acesso a uma sala, nao todas.
        
        // Resumindo para o serviodor funcionar ( assumindo posse do programa ):
        // 1. Ser Administrador do computador e ter o java policy files instalado.
        // 2. Ter o Ip de sua máquina igual ao ip que os clientes tentam se conectar
        // 3. Estar na mesma rede que os clientes ( supondo um ip privado )
        // 4. Ter o keystore correspondente.
        // 5. Saber a senha para descriptografar o keystore.
         
        // medidas de segurança ( Em ordem de importância )
        // I   Senha forte para a keystore
        // II  impedir acesso ao computador com a keystore ( Remoto ou físico )
        // III impedir acesso ao programa servidor / código fonte do servidor
        // IV  impedir acesso não autorizado a rede local -> permissão administrador na rede local
        //     - se for rede Wi-Fi, manter a senha segura, já configurada nas máquinas
        //     - se for cabeada, impedir conectar notebooks e etc...
        
        // a etapa II deve ser tomada como muito importante, pois num vazamento da senha
        // essa etapa deve dar uma margem de tempo suficiente para atualizar os clientes com um novo certificado.
        // antes que um ataque seja feito
        
        // deveria haver um gatilho para desativar temporariamente os cliente no caso da senha vazar
        // algo que fosse rápido para checar e difícil para alguém usar como meio de desligar o programa
        
        // TODO: naive security by obscurity, se nao consigo proteger mais que isso,
        // tornar o protocolo complicado e difícil de reversamente-egenheirar
        
        
        /*
        // le a senha do servidor
        String senha = read();
		// Validating a hash
        Inicio.out.println("Checando senha...");
        try
        {
            if (!BCrypt.checkpw(senha, serverPasswHash))
            //if(!server_passw.equals(senha))
            {
                write("Senha incorreta!");
                Inicio.out.println("Servidor com senha incorreta.");
                throw new ExitAppException("servidor não foi autenticado.",null,false);
            }
            Inicio.out.println("Servidor Autenticado!");
            write("OK");
        }
        catch(Exception e)
        {
            e.printStackTrace();
            write("Senha incorreta!");
            Inicio.out.println("erro ao processar senha incorreta.");
            throw new ExitAppException("servidor não foi autenticado.",e,false);
        }
        */
        
        // para controlar o delay de reconexao e mudar o wifi sempre
        ClientApp.ConnectedOnce = true;
        //opcoes
        int splash_delay = ClientMain._delay_defaultsplash;
        
        try
        {
            String server_info = read();
            JSONParser parser = new JSONParser();
            JSONObject json = (JSONObject) parser.parse(server_info);
            
            if(json.containsKey("splash_delay"))
            splash_delay = Integer.parseInt((String)json.get("splash_delay"));
            
        }
        catch(Exception e)
        {
            System.out.println("Erro ao carregar informações do servidor:");
            e.printStackTrace(System.out);
        }
        //int splash_delay = tryReadInt(ClientMain._delay_defaultsplash);
        
        // splash screen
        if(conn_index == 0 && splash_delay > 0)
        {
            ScreenLocker.splash(splash_delay);
        }
        
        int kiosk_code = -1;
        
        try
        {
        // espera por pedidos de execucao de comandos
        String linha;
        while(!(linha = read()).isEmpty())
        {
        	linha = linha.trim();
        	boolean hasArgs = linha.contains(" ");
        	final String req;
        	final String[] arguments;
        	if(!hasArgs)
        	{
        		req = linha.toLowerCase();
        		arguments = null;	
        	}
        	else
        	{
        		req = linha.substring(0,linha.indexOf(' ')).toLowerCase();
                int n_args = Integer.parseInt(linha.substring(linha.indexOf(' ')+1)); 
        		arguments = new String[n_args];
                for(int i=0;i<n_args;i++)
                {
                    arguments[i] = read();
                }
        	}
            System.out.println("Requisicao '"+linha+"'");
            
            switch(req)
            {
                case "stop":
                	CmdExec.stop(arguments[0]);
                	write("OK");
                break;
                case "browse":
                {
                    String site_url = arguments[0];
                    ProgramOpener.browse(site_url);
                    write("OK");
                }
                break;
                case "kiosk-browse":
                {
                    String site_url = arguments[0];
                    kiosk_code = ProgramOpener.kiosk_browse(site_url);
                    write("OK");
                }
                case "kiosk-close":
                {
                    ProgramOpener.kiosk_close(kiosk_code);
                    kiosk_code = -1;
                    write("OK");
                }
                break;
                case "start": // -- inseguro e não portável
                {
                    String program_path = arguments[0];
                    String program_process = arguments[1];
                    if(ProgramOpener.start(program_path,program_process))
                    {
                        write("OK");
                    }
                    else
                    {
                        write("Nao Pode abrir o programa: '"+program_path+"'");
                    }
                }
                break;
                case "exit":
                    write("OK");
                    throw new ExitAppException("saiu normalmente.",null,true);
                case "shutdown":
                    CmdExec.shutdown();
                    write("OK");
                break;
                case "restart":
                    CmdExec.restart();
                    write("OK");
                break;
                case "logoff":
                    CmdExec.logoff();
                    write("OK");
                break;
                case "cancelshutdown":
                    CmdExec.cancelshutdown();
                    write("OK");
                break;
                case "blacklist":
                    if(arguments == null)
                    {
                       ClientApp.setBlackList(new ArrayList<String>()); 
                    }
                    else
                    {
                        ClientApp.setBlackList(Arrays.asList(arguments));
                    }
                    write("OK");
                break;
                case "lockscreen":
                    ClientApp.locker.startLocking(false);
                    write("OK");
                break;
                case "broadcast": // rídículo, sem palavras.
                {
                    ClientApp.locker.startBroadcasting();
                    
                    int size = Integer.parseInt(arguments[0]);
                    byte[] file = new byte[size];
                    input.readFully(file);
                    //InputStream inImg = new ByteArrayInputStream(file);
                    //BufferedImage image = ImageIO.read(inImg);
                    BufferedImage image = JpegHelper.decompress_jpeg(file);
                    ClientApp.locker.changeBroadcastImg(image);
                    write("OK");
                }
                break;
                case "unlockscreen":
                    ClientApp.locker.stopLocking();
                    write("OK");
                break;
                case "download":// -- inseguro.
                    // nao deve passar arquivos grandes, maiores que 5 Mb
                {
                    String action = arguments[0];
                    File dest_pathfile = ProgramOpener.parsePath("<downloads>/"+arguments[1]);
                    if(dest_pathfile == null)
                    {
                        write("Caminho Nao Aceito: '"+arguments[1]+"'");
                    }
                    else
                    {
                        int size = Integer.parseInt(arguments[2]);
                        byte[] file = new byte[size];
                        input.readFully(file);
                        Files.write(dest_pathfile.toPath(), file);
                        if(action.equals("run"))
                        {
                            if(ProgramOpener.start("<downloads>/"+arguments[1],null))
                            {
                                write("OK");
                            }
                            else
                            {
                                write("Nao Pode abrir o programa: '"+dest_pathfile.getAbsolutePath()+"'");
                            }
                        }
                        else
                        {
                            write("OK");
                        }
                    }
                }
                break;
                //case "exec": //-- inseguro e não portável
                //	// retira o 'exec'
                //	String cmd = arguments[0];
                //	CmdExec.execCmd(cmd);
                //break;
                //case "bringwindow":
                //https://stackoverflow.com/questions/557166/bring-to-front-for-windows-xp-command-shell
                //break;
                case "msg":
                {
                	//final String txt = linha.substring(linha.indexOf(' ')+1);
                    final String txt = arguments[0];
                	new Thread(new Runnable(){public void run(){
                		//JOptionPane.showMessageDialog(null, txt);
                        JDialog dialog = new JOptionPane(txt,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION).createDialog("Mensagem Recebida"); 
                        dialog.setAlwaysOnTop(true);
                        dialog.setVisible(true);
                        dialog.dispose();
                	}}).start();
                	write("OK");
                }
                break;
                //case "question": // muito mal feito, se o usuario nao responder, trava o inteiro programa
                //{
                //	//final String txt = linha.substring(linha.indexOf(' ')+1);
                //    final String txt = arguments[0];
                //	
                //    int dialogButton = JOptionPane.YES_NO_OPTION;
                //    int dialogResult = JOptionPane.showConfirmDialog(null, txt, "Por favor, Responda", dialogButton, JOptionPane.QUESTION_MESSAGE);
                //    if (dialogResult == JOptionPane.YES_OPTION) {
                //        write("YES");
                //    }
                //    else
                //    {
                //        write("NO");
                //    }
                //}
                //break;
                case "ping":
                    write("pong");
                break;
                default:
                    write("Comando '"+req+"' nao implementado");
                break;
            }
        	
        }
        }
        catch(ExitAppException e){
            throw e;
        }
        catch(Exception e){
            System.out.println("Erro no loop de processamento dos requests:");
            e.printStackTrace(System.out);
        }
        finally
        {
            if(ClientApp.locker != null)
            {
                try {
                    ClientApp.locker.stopLocking();
                } catch (InterruptedException ex) {
                    Logger.getLogger(ClientCmdProtocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                //if(kiosk_code != -1)
                //{
                //    ProgramOpener.kiosk_close(kiosk_code);
                //    kiosk_code = -1;
                //} precisa mesmo?
            }
            System.out.println("Acabou!");
        }
    }
    
}
