/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.erickweil.xuggler;
import com.sun.jna.Native;
import com.sun.jna.platform.win32.GDI32Util;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.Win32Exception;
import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.platform.win32.WinDef.HWND;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;

import com.xuggle.mediatool.ToolFactory;
import com.xuggle.mediatool.IMediaWriter;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IContainer;
import com.xuggle.xuggler.IContainerFormat;
import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IRational;
import com.xuggle.xuggler.IStream;
import com.xuggle.xuggler.IStreamCoder;
import com.xuggle.xuggler.io.XugglerIO;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

/**
 * Using {@link IMediaWriter}, takes snapshots of your desktop and
 * encodes them to video.
 * 
 * @author aclarke
 * 
 */
/**
 *
 * @author Usuario
 */
public class TesteXuggler {
  private static IRational FRAME_RATE=IRational.make(40,2);
  private static int millis_to_wait = (int)(1000.0/FRAME_RATE.getDouble());
  private static final int SECONDS_TO_RUN_FOR = 10;
  
  /**
   * Takes a screen shot of your entire screen and writes it to
   * output.flv
   * 
   * @param args
   */
  public static void main(String[] args)
  {
    try
    {
      final String outFile;
      if (args.length > 0)
        outFile = args[0];
      else
        outFile = "output.flv";
      // This is the robot for taking a snapshot of the
      // screen.  It's part of Java AWT
      final Robot robot = new Robot();
      //HWND desktopWindow = User32.INSTANCE.GetDesktopWindow();
      final Toolkit toolkit = Toolkit.getDefaultToolkit();
      final Rectangle screenBounds = new Rectangle(toolkit.getScreenSize());
      //BufferedImage bufferImg = JNAScreenShotter.createImg(screenBounds);
      
      
      /*
      // First, let's make a IMediaWriter to write the file.
      final IContainer container = IContainer.make();
      if (container.open(outFile, IContainer.Type.WRITE, null) <0) 
        throw new RuntimeException("failed to open");  
        */
      //final IMediaWriter writer = ToolFactory.makeWriter(outFile);
      BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(outFile));
      //DataOutputStream stream = new DataOutputStream(bout);
      IContainerFormat containerFormat = IContainerFormat.make();
    containerFormat.setOutputFormat("flv", null, "video/x-flv");
    
    //  IContainer container = IContainer.make(containerFormat);
    
      final IMediaWriter writer = ToolFactory.makeWriter(XugglerIO.map(bout));
      writer.getContainer().setFormat(containerFormat);
      
      System.out.println(writer.getDefaultPixelType());

    // manually set the container format (because it can't detect it by filename anymore)
    
    //containerFormat.setOutputFormat("3gp", "a.3gp", "video/3gp");
    //writer.getContainer().setFormat(containerFormat);

      // We tell it we're going to add one video stream, with id 0,
      // at position 0, and that it will have a fixed frame rate of
      // FRAME_RATE.
      int stream_created = writer.addVideoStream(0, 0, ICodec.ID.CODEC_ID_H264,
          FRAME_RATE,
          screenBounds.width, screenBounds.height);
        IStream stream1 = writer.getContainer().getStream(stream_created);
        System.out.println(stream1.getStreamCoder().getCodec().getName());
        
        
              IStreamCoder coder = writer.getContainer().getStream(0).getStreamCoder();
      System.out.println("GOPS:"+coder.getNumPicturesInGroupOfPictures());
      // Now, we're going to loop
      long startTime = System.nanoTime();
      System.out.println(FRAME_RATE.getDouble());
      for (int index = 0; index < SECONDS_TO_RUN_FOR*FRAME_RATE.getDouble(); index++)
      {
        // take the screen shot
        long measure = System.nanoTime();
        BufferedImage screen = robot.createScreenCapture(screenBounds);

        //assertNotNull("Failed to obtain desktop window handle", desktopWindow);
        //BufferedImage screen = GDI32Util.getScreenshot(desktopWindow);
        //BufferedImage screen = JNAScreenShotter.getScreenshot(desktopWindow,screenBounds,bufferImg);
        double diff1 = (double)(System.nanoTime() - measure)/1_000_000.0;
        // convert to the right image type
        BufferedImage bgrScreen = convertToType(screen,
            BufferedImage.TYPE_3BYTE_BGR);
        
        measure = System.nanoTime();
        // encode the image
        writer.encodeVideo(0,bgrScreen,
            System.nanoTime()-startTime, TimeUnit.NANOSECONDS);
        double diff2 = (double)(System.nanoTime() - measure)/1_000_000.0;
        
        System.out.println("encoded image: " +index + "\t"+diff1+"\t"+diff2);
        
        // sleep for framerate milliseconds
        Thread.sleep(Math.max(0, millis_to_wait - (int)(diff1 + diff2)));

      }
      // Finally we tell the writer to close and write the trailer if
      // needed
      
      writer.close();
    }
    catch (Throwable e)
    {
      e.printStackTrace();
      System.err.println("an error occurred: " + e.getMessage());
    }
  }
  /**
   * Convert a {@link BufferedImage} of any type, to {@link BufferedImage} of a
   * specified type. If the source image is the same type as the target type,
   * then original image is returned, otherwise new image of the correct type is
   * created and the content of the source image is copied into the new image.
   * 
   * @param sourceImage
   *          the image to be converted
   * @param targetType
   *          the desired BufferedImage type
   * 
   * @return a BufferedImage of the specifed target type.
   * 
   * @see BufferedImage
   */

  public static BufferedImage convertToType(BufferedImage sourceImage,
      int targetType)
  {
    BufferedImage image;

    // if the source image is already the target type, return the source image

    if (sourceImage.getType() == targetType)
      image = sourceImage;

    // otherwise create a new image of the target type and draw the new
    // image

    else
    {
      image = new BufferedImage(sourceImage.getWidth(),
          sourceImage.getHeight(), targetType);
      image.getGraphics().drawImage(sourceImage, 0, 0, null);
    }

    return image;
  }

}
